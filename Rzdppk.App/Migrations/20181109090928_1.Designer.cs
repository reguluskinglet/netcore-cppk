// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rzdppk.App.Programms;
using Rzdppk.Model.Enums;

namespace Rzdppk.App.Migrations
{
    [DbContext(typeof(RzdMobileContext))]
    [Migration("20181109090928_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932");

            modelBuilder.Entity("Rzdppk.App.Models.InspectionTagScaned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("InspectionId");

                    b.Property<bool>("IsRfidScaned");

                    b.Property<int>("LabelId");

                    b.Property<int>("SendStatus");

                    b.Property<Guid?>("TaskStatusId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("LabelId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("InspectionTagScaneds");
                });

            modelBuilder.Entity("Rzdppk.Model.ActCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("ActCategories");
                });

            modelBuilder.Entity("Rzdppk.Model.Auth.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<int>("PermissionBits");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Rzdppk.Model.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BrigadeId");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PersonNumber");

                    b.Property<string>("PersonPosition");

                    b.Property<int>("RoleId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("BrigadeId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("auth_users");
                });

            modelBuilder.Entity("Rzdppk.Model.Auth.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Permissions");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("auth_roles");
                });

            modelBuilder.Entity("Rzdppk.Model.Brigade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrigadeType");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Brigades");
                });

            modelBuilder.Entity("Rzdppk.Model.Carriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModelId");

                    b.Property<int>("Number");

                    b.Property<string>("Serial");

                    b.Property<int?>("TrainId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("TrainId");

                    b.ToTable("Carriages");
                });

            modelBuilder.Entity("Rzdppk.Model.CarriageMigration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarriageId");

                    b.Property<int>("StantionId");

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("CarriageId");

                    b.HasIndex("StantionId");

                    b.HasIndex("TrainId");

                    b.ToTable("CarriageMigrations");
                });

            modelBuilder.Entity("Rzdppk.Model.CheckListEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckListType");

                    b.Property<int>("EquipmentModelId");

                    b.Property<int>("FaultType");

                    b.Property<string>("NameTask");

                    b.Property<int>("TaskLevel");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("Value");

                    b.Property<int>("ValueType");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentModelId");

                    b.ToTable("CheckListEquipments");
                });

            modelBuilder.Entity("Rzdppk.Model.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CellNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Serial");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Rzdppk.Model.DeviceFault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("DeviceFaults");
                });

            modelBuilder.Entity("Rzdppk.Model.DeviceTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<int?>("DeviceFaultId");

                    b.Property<int>("DeviceId");

                    b.Property<Guid>("RefId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeviceFaultId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceTasks");
                });

            modelBuilder.Entity("Rzdppk.Model.DeviceTaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("DeviceTaskId");

                    b.Property<Guid>("RefId");

                    b.Property<int>("Status");

                    b.Property<string>("Text");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceTaskComments");
                });

            modelBuilder.Entity("Rzdppk.Model.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Rzdppk.Model.EquipmentAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActCategoryId");

                    b.Property<int>("EquipmentId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("ActCategoryId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentActs");
                });

            modelBuilder.Entity("Rzdppk.Model.EquipmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("EquipmentCategoryes");
                });

            modelBuilder.Entity("Rzdppk.Model.EquipmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EquipmentId");

                    b.Property<bool?>("IsMark");

                    b.Property<int>("ModelId");

                    b.Property<int?>("ParentId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ParentId");

                    b.ToTable("EquipmentModels");
                });

            modelBuilder.Entity("Rzdppk.Model.Fault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("FaultType");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("Rzdppk.Model.FaultEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EquipmentId");

                    b.Property<int>("FaultId");

                    b.Property<int>("TaskLevel");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FaultId");

                    b.ToTable("FaultEquipments");
                });

            modelBuilder.Entity("Rzdppk.Model.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarriageId");

                    b.Property<int?>("EquipmentModelId");

                    b.Property<int>("LabelType");

                    b.Property<string>("Rfid");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("CarriageId");

                    b.HasIndex("EquipmentModelId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Rzdppk.Model.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("ModelType");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Rzdppk.Model.PlaneBrigadeTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PlanedRouteTrainId");

                    b.Property<int>("StantionEndId");

                    b.Property<int>("StantionStartId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PlanedRouteTrainId");

                    b.HasIndex("StantionEndId");

                    b.HasIndex("StantionStartId");

                    b.HasIndex("UserId");

                    b.ToTable("PlaneBrigadeTrains");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.DayOfRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<int>("TurnoverId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("TurnoverId");

                    b.ToTable("DayOfRoutes");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.DayOfTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<int>("TripId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("DayOfTrips");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.DepoEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InTime");

                    b.Property<int?>("InspectionId");

                    b.Property<DateTime?>("OutTime");

                    b.Property<string>("InspectionTxt");

                    b.Property<int>("ParkingId");

                    b.Property<DateTime?>("ParkingTime");

                    b.Property<DateTime?>("RepairStopTime");

                    b.Property<int?>("RouteId");

                    b.Property<DateTime?>("TestStartTime");

                    b.Property<DateTime?>("TestStopTime");

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.HasIndex("RouteId");

                    b.HasIndex("TrainId");

                    b.HasIndex("UserId");

                    b.ToTable("DepoEvents");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.InspectionRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CheckListType");

                    b.Property<DateTime>("End");

                    b.Property<int>("RouteId");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("InspectionRoutes");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("StantionId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("StantionId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.PlanedInspectionRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CheckListType");

                    b.Property<DateTime>("End");

                    b.Property<int>("PlanedRouteTrainId");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("PlanedRouteTrainId");

                    b.ToTable("PlanedInspectionRoutes");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.PlanedRouteTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("RouteId");

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TrainId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanedRouteTrains");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.PlaneStantionOnTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InTime");

                    b.Property<DateTime>("OutTime");

                    b.Property<int>("PlanedRouteTrainId");

                    b.Property<int>("StantionId");

                    b.Property<int>("TripId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("PlanedRouteTrainId");

                    b.HasIndex("StantionId");

                    b.HasIndex("TripId");

                    b.ToTable("PlaneStantionOnTrips");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.TripOnRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RouteId");

                    b.Property<int>("TripId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TripId");

                    b.ToTable("TripOnRoutes");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.Turnover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DirectionId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.ToTable("Turnovers");
                });

            modelBuilder.Entity("Rzdppk.Model.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<double>("Mileage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name");

                    b.Property<int?>("TurnoverId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("TurnoverId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Rzdppk.Model.Stantion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.Property<int>("StantionType");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Stantions");
                });

            modelBuilder.Entity("Rzdppk.Model.StantionOnTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InTime");

                    b.Property<DateTime>("OutTime");

                    b.Property<int>("StantionId");

                    b.Property<int>("TripId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("StantionId");

                    b.HasIndex("TripId");

                    b.ToTable("StantionOnTrips");
                });

            modelBuilder.Entity("Rzdppk.Model.TaskPrint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("LabelType");

                    b.Property<string>("Name");

                    b.Property<int?>("TemplateLabelId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TemplateLabelId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskPrints");
                });

            modelBuilder.Entity("Rzdppk.Model.TaskPrintItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanPrinted");

                    b.Property<int?>("LabelId");

                    b.Property<int?>("TaskPrintId");

                    b.Property<long>("TimePrinted");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("TaskPrintId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskPrintItems");
                });

            modelBuilder.Entity("Rzdppk.Model.TechPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateDrawUp");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<string>("PlaceDrawUp")
                        .IsRequired();

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.ToTable("TechPasses");
                });

            modelBuilder.Entity("Rzdppk.Model.TemplateLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Template");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("TemplateLabels");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.DocumentTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<string>("Description");

                    b.Property<int>("DocumentType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Name");

                    b.Property<int>("SendStatus");

                    b.Property<Guid?>("TrainTaskCommentTerminalId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("TrainTaskCommentTerminalId");

                    b.ToTable("DocumentTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.InspectionDataTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CarriageId");

                    b.Property<Guid>("InspectionTerminalId");

                    b.Property<int>("SendStatus");

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CarriageId");

                    b.HasIndex("InspectionTerminalId");

                    b.ToTable("InspectionDataTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.InspectionTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckListType");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.Property<int>("SendStatus");

                    b.Property<int>("Status");

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.HasIndex("UserId");

                    b.ToTable("InspectionTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.MeterageTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("InspectionId");

                    b.Property<int?>("LabelId");

                    b.Property<int>("SendStatus");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int?>("Value");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("LabelId");

                    b.ToTable("MeterageTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.SignatureTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaptionImage");

                    b.Property<Guid>("InspectionId");

                    b.Property<int>("SendStatus");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("SignatureTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TerminalBrigadeRouteTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrigadeType");

                    b.Property<DateTime>("Date");

                    b.Property<int>("PlanedRouteTrainId");

                    b.Property<int>("RouteId");

                    b.Property<int>("StantionEndId");

                    b.Property<int>("StantionStartId");

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TrainId");

                    b.HasIndex("UserId");

                    b.ToTable("TerminalBrigadeTrains");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TerminalInspectionRouteTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckListType");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("End");

                    b.Property<int>("RouteId");

                    b.Property<DateTime>("Start");

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TrainId");

                    b.ToTable("TerminalInspectionRouteTrains");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskAttributeTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CheckListEquipmentId");

                    b.Property<string>("Description");

                    b.Property<int?>("FaultId");

                    b.Property<Guid?>("InspectionId");

                    b.Property<int>("SendStatus");

                    b.Property<int?>("TaskLevel");

                    b.Property<Guid>("TrainTaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.Property<int?>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CheckListEquipmentId");

                    b.HasIndex("FaultId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("TrainTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainTaskAttributeTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskCommentTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("SendStatus");

                    b.Property<string>("Text");

                    b.Property<Guid>("TrainTaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainTaskCommentTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskExecutorTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrigadeType");

                    b.Property<DateTime>("Date");

                    b.Property<int>("SendStatus");

                    b.Property<Guid>("TrainTaskId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainTaskExecutorTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskStatusTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("SendStatus");

                    b.Property<int>("Status");

                    b.Property<Guid>("TrainTaskId");

                    b.Property<Guid?>("TrainTaskTerminalId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainTaskTerminalId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainTaskStatusTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarriageId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<int>("EquipmentModelId");

                    b.Property<int>("SendStatus");

                    b.Property<int?>("TaskNumber");

                    b.Property<int>("TaskType");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CarriageId");

                    b.HasIndex("EquipmentModelId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainTaskTerminals");
                });

            modelBuilder.Entity("Rzdppk.Model.Train", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("DirectionId");

                    b.Property<string>("Name");

                    b.Property<int?>("StantionId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.HasIndex("StantionId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("Rzdppk.Model.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("TripType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Rzdppk.Model.TV.TVBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("TvBoxes");
                });

            modelBuilder.Entity("Rzdppk.Model.TV.TVPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<int>("ScreenType");

                    b.Property<int>("TVBoxId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("TVBoxId");

                    b.ToTable("TvPanels");
                });

            modelBuilder.Entity("Rzdppk.App.Models.InspectionTagScaned", b =>
                {
                    b.HasOne("Rzdppk.Model.Terminal.InspectionTerminal", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId");

                    b.HasOne("Rzdppk.Model.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Terminal.TrainTaskStatusTerminal", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");
                });

            modelBuilder.Entity("Rzdppk.Model.Auth.User", b =>
                {
                    b.HasOne("Rzdppk.Model.Brigade", "Brigade")
                        .WithMany()
                        .HasForeignKey("BrigadeId");

                    b.HasOne("Rzdppk.Model.Auth.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Carriage", b =>
                {
                    b.HasOne("Rzdppk.Model.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");
                });

            modelBuilder.Entity("Rzdppk.Model.CarriageMigration", b =>
                {
                    b.HasOne("Rzdppk.Model.Carriage", "Carriage")
                        .WithMany()
                        .HasForeignKey("CarriageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Stantion", "Stantion")
                        .WithMany()
                        .HasForeignKey("StantionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.CheckListEquipment", b =>
                {
                    b.HasOne("Rzdppk.Model.EquipmentModel", "EquipmentModel")
                        .WithMany()
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.DeviceTask", b =>
                {
                    b.HasOne("Rzdppk.Model.DeviceFault", "DeviceFault")
                        .WithMany()
                        .HasForeignKey("DeviceFaultId");

                    b.HasOne("Rzdppk.Model.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.DeviceTaskComment", b =>
                {
                    b.HasOne("Rzdppk.Model.DeviceTask", "DeviceTask")
                        .WithMany("DeviceTaskComments")
                        .HasForeignKey("DeviceTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Equipment", b =>
                {
                    b.HasOne("Rzdppk.Model.EquipmentCategory", "Category")
                        .WithMany("Equipments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.EquipmentAct", b =>
                {
                    b.HasOne("Rzdppk.Model.ActCategory", "ActCategory")
                        .WithMany("EquipmentActs")
                        .HasForeignKey("ActCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Equipment", "Equipment")
                        .WithMany("EquipmentActs")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.EquipmentModel", b =>
                {
                    b.HasOne("Rzdppk.Model.Equipment", "Equipment")
                        .WithMany("EquipmentModels")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Model", "Model")
                        .WithMany("EquipmentModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.EquipmentModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Rzdppk.Model.FaultEquipment", b =>
                {
                    b.HasOne("Rzdppk.Model.Equipment", "Equipment")
                        .WithMany("FaultEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Fault", "Fault")
                        .WithMany("FaultEquipments")
                        .HasForeignKey("FaultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Label", b =>
                {
                    b.HasOne("Rzdppk.Model.Carriage", "Carriage")
                        .WithMany()
                        .HasForeignKey("CarriageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.EquipmentModel", "EquipmentModel")
                        .WithMany("Label")
                        .HasForeignKey("EquipmentModelId");
                });

            modelBuilder.Entity("Rzdppk.Model.PlaneBrigadeTrain", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.PlanedRouteTrain", "PlanedRouteTrain")
                        .WithMany()
                        .HasForeignKey("PlanedRouteTrainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Raspisanie.PlaneStantionOnTrip", "StantionEnd")
                        .WithMany("StantionEnds")
                        .HasForeignKey("StantionEndId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rzdppk.Model.Raspisanie.PlaneStantionOnTrip", "StantionStart")
                        .WithMany("StantionStarts")
                        .HasForeignKey("StantionStartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany("PlaneBrigadeTrains")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.DayOfRoute", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.Turnover", "Turnover")
                        .WithMany()
                        .HasForeignKey("TurnoverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.DayOfTrip", b =>
                {
                    b.HasOne("Rzdppk.Model.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.DepoEvent", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.Parking", "Parking")
                        .WithMany("DepoEvents")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Route", "Route")
                        .WithMany("DepoEvents")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany("DepoEvents")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.InspectionRoute", b =>
                {
                    b.HasOne("Rzdppk.Model.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.Parking", b =>
                {
                    b.HasOne("Rzdppk.Model.Stantion", "Stantion")
                        .WithMany("Parkings")
                        .HasForeignKey("StantionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.PlanedInspectionRoute", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.PlanedRouteTrain", "PlanedRouteTrain")
                        .WithMany("PlanedInspectionRoutes")
                        .HasForeignKey("PlanedRouteTrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.PlanedRouteTrain", b =>
                {
                    b.HasOne("Rzdppk.Model.Route", "Route")
                        .WithMany("PlanedRouteTrains")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.PlaneStantionOnTrip", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.PlanedRouteTrain", "PlanedRouteTrain")
                        .WithMany()
                        .HasForeignKey("PlanedRouteTrainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Stantion", "Stantion")
                        .WithMany()
                        .HasForeignKey("StantionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.TripOnRoute", b =>
                {
                    b.HasOne("Rzdppk.Model.Route", "Route")
                        .WithMany("TripOnRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Trip", "Trip")
                        .WithMany("TripOnRoutes")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Raspisanie.Turnover", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.Direction", "Direction")
                        .WithMany("Turnovers")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Route", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.Turnover", "Turnover")
                        .WithMany("Routes")
                        .HasForeignKey("TurnoverId");
                });

            modelBuilder.Entity("Rzdppk.Model.StantionOnTrip", b =>
                {
                    b.HasOne("Rzdppk.Model.Stantion", "Stantion")
                        .WithMany("StantionOnTrips")
                        .HasForeignKey("StantionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Trip", "Trip")
                        .WithMany("StantionOnTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.TaskPrint", b =>
                {
                    b.HasOne("Rzdppk.Model.TemplateLabel", "TemplateLabel")
                        .WithMany()
                        .HasForeignKey("TemplateLabelId");

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Rzdppk.Model.TaskPrintItem", b =>
                {
                    b.HasOne("Rzdppk.Model.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId");

                    b.HasOne("Rzdppk.Model.TaskPrint", "TaskPrint")
                        .WithMany()
                        .HasForeignKey("TaskPrintId");

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Rzdppk.Model.TechPass", b =>
                {
                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.DocumentTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Terminal.TrainTaskCommentTerminal", "TrainTaskCommentTerminal")
                        .WithMany("Documents")
                        .HasForeignKey("TrainTaskCommentTerminalId");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.InspectionDataTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Carriage", "Carriage")
                        .WithMany()
                        .HasForeignKey("CarriageId");

                    b.HasOne("Rzdppk.Model.Terminal.InspectionTerminal", "InspectionTerminal")
                        .WithMany("InspectionDataTerminals")
                        .HasForeignKey("InspectionTerminalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.InspectionTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.MeterageTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Terminal.InspectionTerminal", "Inspection")
                        .WithMany("Meterages")
                        .HasForeignKey("InspectionId");

                    b.HasOne("Rzdppk.Model.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId");
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.SignatureTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Terminal.InspectionTerminal", "Inspection")
                        .WithMany("Signatures")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TerminalBrigadeRouteTrain", b =>
                {
                    b.HasOne("Rzdppk.Model.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TerminalInspectionRouteTrain", b =>
                {
                    b.HasOne("Rzdppk.Model.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskAttributeTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.CheckListEquipment", "CheckListEquipment")
                        .WithMany()
                        .HasForeignKey("CheckListEquipmentId");

                    b.HasOne("Rzdppk.Model.Fault", "Fault")
                        .WithMany()
                        .HasForeignKey("FaultId");

                    b.HasOne("Rzdppk.Model.Terminal.InspectionTerminal", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId");

                    b.HasOne("Rzdppk.Model.Terminal.TrainTaskTerminal", "TrainTask")
                        .WithMany("TrainTaskAttributes")
                        .HasForeignKey("TrainTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskCommentTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Terminal.TrainTaskTerminal", "TrainTask")
                        .WithMany("TrainTaskComments")
                        .HasForeignKey("TrainTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskExecutorTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Terminal.TrainTaskTerminal", "TrainTask")
                        .WithMany("TrainTaskExecutors")
                        .HasForeignKey("TrainTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskStatusTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Terminal.TrainTaskTerminal")
                        .WithMany("TrainTaskStatuses")
                        .HasForeignKey("TrainTaskTerminalId");

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Terminal.TrainTaskTerminal", b =>
                {
                    b.HasOne("Rzdppk.Model.Carriage", "Carriage")
                        .WithMany()
                        .HasForeignKey("CarriageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.EquipmentModel", "EquipmentModel")
                        .WithMany()
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rzdppk.Model.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rzdppk.Model.Train", b =>
                {
                    b.HasOne("Rzdppk.Model.Raspisanie.Direction", "Direction")
                        .WithMany("Trains")
                        .HasForeignKey("DirectionId");

                    b.HasOne("Rzdppk.Model.Stantion", "Stantion")
                        .WithMany("Trains")
                        .HasForeignKey("StantionId");
                });

            modelBuilder.Entity("Rzdppk.Model.TV.TVPanel", b =>
                {
                    b.HasOne("Rzdppk.Model.TV.TVBox", "TVBox")
                        .WithMany()
                        .HasForeignKey("TVBoxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
